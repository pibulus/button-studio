// Copyright 2018-2025 the Deno authors. MIT license.
export const padding = "=".charCodeAt(0);
export const alphabet = {
  base32: new TextEncoder().encode("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),
  base32hex: new TextEncoder().encode("0123456789ABCDEFGHIJKLMNOPQRSTUV"),
  base32crockford: new TextEncoder().encode("0123456789ABCDEFGHJKMNPQRSTVWXYZ")
};
export const rAlphabet = {
  base32: new Uint8Array(128).fill(32),
  base32hex: new Uint8Array(128).fill(32),
  base32crockford: new Uint8Array(128).fill(32)
};
alphabet.base32.forEach((byte, i)=>rAlphabet.base32[byte] = i);
alphabet.base32hex.forEach((byte, i)=>rAlphabet.base32hex[byte] = i);
alphabet.base32crockford.forEach((byte, i)=>rAlphabet.base32crockford[byte] = i);
/**
 * Calculate the output size needed to encode a given input size for
 * {@linkcode encodeIntoBase32}.
 *
 * @param rawSize The size of the input buffer.
 * @returns The size of the output buffer.
 *
 * @example Basic Usage
 * ```ts
 * import { assertEquals } from "@std/assert";
 * import { calcSizeBase32 } from "@std/encoding/unstable-base32";
 *
 * assertEquals(calcSizeBase32(1), 8);
 * ```
 */ export function calcSizeBase32(rawSize) {
  return ((rawSize + 4) / 5 | 0) * 8;
}
export function encode(buffer, i, o, alphabet, padding) {
  i += 4;
  for(; i < buffer.length; i += 5){
    let x = buffer[i - 4] << 16 | buffer[i - 3] << 8 | buffer[i - 2];
    buffer[o++] = alphabet[x >> 19];
    buffer[o++] = alphabet[x >> 14 & 0x1F];
    buffer[o++] = alphabet[x >> 9 & 0x1F];
    buffer[o++] = alphabet[x >> 4 & 0x1F];
    x = x << 16 | buffer[i - 1] << 8 | buffer[i];
    buffer[o++] = alphabet[x >> 15 & 0x1F];
    buffer[o++] = alphabet[x >> 10 & 0x1F];
    buffer[o++] = alphabet[x >> 5 & 0x1F];
    buffer[o++] = alphabet[x & 0x1F];
  }
  switch(i){
    case buffer.length + 3:
      {
        const x = buffer[i - 4] << 16;
        buffer[o++] = alphabet[x >> 19];
        buffer[o++] = alphabet[x >> 14 & 0x1F];
        buffer[o++] = padding;
        buffer[o++] = padding;
        buffer[o++] = padding;
        buffer[o++] = padding;
        buffer[o++] = padding;
        buffer[o++] = padding;
        break;
      }
    case buffer.length + 2:
      {
        const x = buffer[i - 4] << 16 | buffer[i - 3] << 8;
        buffer[o++] = alphabet[x >> 19];
        buffer[o++] = alphabet[x >> 14 & 0x1F];
        buffer[o++] = alphabet[x >> 9 & 0x1F];
        buffer[o++] = alphabet[x >> 4 & 0x1F];
        buffer[o++] = padding;
        buffer[o++] = padding;
        buffer[o++] = padding;
        buffer[o++] = padding;
        break;
      }
    case buffer.length + 1:
      {
        let x = buffer[i - 4] << 16 | buffer[i - 3] << 8 | buffer[i - 2];
        buffer[o++] = alphabet[x >> 19];
        buffer[o++] = alphabet[x >> 14 & 0x1F];
        buffer[o++] = alphabet[x >> 9 & 0x1F];
        buffer[o++] = alphabet[x >> 4 & 0x1F];
        x <<= 16;
        buffer[o++] = alphabet[x >> 15 & 0x1F];
        buffer[o++] = padding;
        buffer[o++] = padding;
        buffer[o++] = padding;
        break;
      }
    case buffer.length:
      {
        let x = buffer[i - 4] << 16 | buffer[i - 3] << 8 | buffer[i - 2];
        buffer[o++] = alphabet[x >> 19];
        buffer[o++] = alphabet[x >> 14 & 0x1F];
        buffer[o++] = alphabet[x >> 9 & 0x1F];
        buffer[o++] = alphabet[x >> 4 & 0x1F];
        x = x << 16 | buffer[i - 1] << 8;
        buffer[o++] = alphabet[x >> 15 & 0x1F];
        buffer[o++] = alphabet[x >> 10 & 0x1F];
        buffer[o++] = alphabet[x >> 5 & 0x1F];
        buffer[o++] = padding;
        break;
      }
  }
  return o;
}
export function decode(buffer, i, o, alphabet, padding) {
  for(let x = buffer.length - 6; x < buffer.length; ++x){
    if (buffer[x] === padding) {
      for(let y = x + 1; y < buffer.length; ++y){
        if (buffer[y] !== padding) {
          throw new TypeError(`Cannot decode input as base32: Invalid character (${String.fromCharCode(buffer[y])})`);
        }
      }
      buffer = buffer.subarray(0, x);
      break;
    }
  }
  switch((buffer.length - o) % 8){
    case 6:
    case 3:
    case 1:
      throw new RangeError(`Cannot decode input as base32: Length (${buffer.length - o}), excluding padding, must not have a remainder of 1, 3, or 6 when divided by 8`);
  }
  i += 7;
  for(; i < buffer.length; i += 8){
    let x = getByte(buffer[i - 7], alphabet) << 19 | getByte(buffer[i - 6], alphabet) << 14 | getByte(buffer[i - 5], alphabet) << 9 | getByte(buffer[i - 4], alphabet) << 4;
    buffer[o++] = x >> 16;
    buffer[o++] = x >> 8 & 0xFF;
    x = x << 16 | getByte(buffer[i - 3], alphabet) << 15 | getByte(buffer[i - 2], alphabet) << 10 | getByte(buffer[i - 1], alphabet) << 5 | getByte(buffer[i], alphabet);
    buffer[o++] = x >> 16 & 0xFF;
    buffer[o++] = x >> 8 & 0xFF;
    buffer[o++] = x & 0xFF;
  }
  switch(i){
    case buffer.length + 5:
      {
        const x = getByte(buffer[i - 7], alphabet) << 19 | getByte(buffer[i - 6], alphabet) << 14;
        buffer[o++] = x >> 16;
        break;
      }
    case buffer.length + 3:
      {
        const x = getByte(buffer[i - 7], alphabet) << 19 | getByte(buffer[i - 6], alphabet) << 14 | getByte(buffer[i - 5], alphabet) << 9 | getByte(buffer[i - 4], alphabet) << 4;
        buffer[o++] = x >> 16;
        buffer[o++] = x >> 8 & 0xFF;
        break;
      }
    case buffer.length + 2:
      {
        let x = getByte(buffer[i - 7], alphabet) << 19 | getByte(buffer[i - 6], alphabet) << 14 | getByte(buffer[i - 5], alphabet) << 9 | getByte(buffer[i - 4], alphabet) << 4;
        buffer[o++] = x >> 16;
        buffer[o++] = x >> 8 & 0xFF;
        x = x << 16 | getByte(buffer[i - 3], alphabet) << 15;
        buffer[o++] = x >> 16 & 0xFF;
        break;
      }
    case buffer.length:
      {
        let x = getByte(buffer[i - 7], alphabet) << 19 | getByte(buffer[i - 6], alphabet) << 14 | getByte(buffer[i - 5], alphabet) << 9 | getByte(buffer[i - 4], alphabet) << 4;
        buffer[o++] = x >> 16;
        buffer[o++] = x >> 8 & 0xFF;
        x = x << 16 | getByte(buffer[i - 3], alphabet) << 15 | getByte(buffer[i - 2], alphabet) << 10 | getByte(buffer[i - 1], alphabet) << 5;
        buffer[o++] = x >> 16 & 0xFF;
        buffer[o++] = x >> 8 & 0xFF;
        break;
      }
  }
  return o;
}
function getByte(char, alphabet) {
  const byte = alphabet[char] ?? 32;
  if (byte === 32) {
    throw new TypeError(`Cannot decode input as base32: Invalid character (${String.fromCharCode(char)})`);
  }
  return byte;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0BzdGQvZW5jb2RpbmcvMS4wLjEwL19jb21tb24zMi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDI1IHRoZSBEZW5vIGF1dGhvcnMuIE1JVCBsaWNlbnNlLlxuXG5pbXBvcnQgdHlwZSB7IFVpbnQ4QXJyYXlfIH0gZnJvbSBcIi4vX3R5cGVzLnRzXCI7XG5leHBvcnQgdHlwZSB7IFVpbnQ4QXJyYXlfIH07XG5cbmV4cG9ydCBjb25zdCBwYWRkaW5nID0gXCI9XCIuY2hhckNvZGVBdCgwKTtcbmV4cG9ydCBjb25zdCBhbHBoYWJldDogUmVjb3JkPEJhc2UzMkFscGhhYmV0LCBVaW50OEFycmF5PiA9IHtcbiAgYmFzZTMyOiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2N1wiKSxcbiAgYmFzZTMyaGV4OiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoXCIwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVlwiKSxcbiAgYmFzZTMyY3JvY2tmb3JkOiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoXCIwMTIzNDU2Nzg5QUJDREVGR0hKS01OUFFSU1RWV1hZWlwiKSxcbn07XG5leHBvcnQgY29uc3QgckFscGhhYmV0OiBSZWNvcmQ8QmFzZTMyQWxwaGFiZXQsIFVpbnQ4QXJyYXk+ID0ge1xuICBiYXNlMzI6IG5ldyBVaW50OEFycmF5KDEyOCkuZmlsbCgzMiksIC8vIGFscGhhYmV0LmJhc2UzMi5sZW5ndGhcbiAgYmFzZTMyaGV4OiBuZXcgVWludDhBcnJheSgxMjgpLmZpbGwoMzIpLFxuICBiYXNlMzJjcm9ja2ZvcmQ6IG5ldyBVaW50OEFycmF5KDEyOCkuZmlsbCgzMiksXG59O1xuYWxwaGFiZXQuYmFzZTMyXG4gIC5mb3JFYWNoKChieXRlLCBpKSA9PiByQWxwaGFiZXQuYmFzZTMyW2J5dGVdID0gaSk7XG5hbHBoYWJldC5iYXNlMzJoZXhcbiAgLmZvckVhY2goKGJ5dGUsIGkpID0+IHJBbHBoYWJldC5iYXNlMzJoZXhbYnl0ZV0gPSBpKTtcbmFscGhhYmV0LmJhc2UzMmNyb2NrZm9yZFxuICAuZm9yRWFjaCgoYnl0ZSwgaSkgPT4gckFscGhhYmV0LmJhc2UzMmNyb2NrZm9yZFtieXRlXSA9IGkpO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGVuY29kaW5nIGFuZCBkZWNvZGluZyBiYXNlMzIgc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNlMzJPcHRpb25zIHtcbiAgLyoqIFRoZSBiYXNlMzIgYWxwaGFiZXQuIERlZmF1bHRzIHRvIFwiYmFzZTMyXCIgKi9cbiAgYWxwaGFiZXQ/OiBCYXNlMzJBbHBoYWJldDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZTMyIGFscGhhYmV0cy5cbiAqL1xuZXhwb3J0IHR5cGUgQmFzZTMyQWxwaGFiZXQgPSBcImJhc2UzMlwiIHwgXCJiYXNlMzJoZXhcIiB8IFwiYmFzZTMyY3JvY2tmb3JkXCI7XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBvdXRwdXQgc2l6ZSBuZWVkZWQgdG8gZW5jb2RlIGEgZ2l2ZW4gaW5wdXQgc2l6ZSBmb3JcbiAqIHtAbGlua2NvZGUgZW5jb2RlSW50b0Jhc2UzMn0uXG4gKlxuICogQHBhcmFtIHJhd1NpemUgVGhlIHNpemUgb2YgdGhlIGlucHV0IGJ1ZmZlci5cbiAqIEByZXR1cm5zIFRoZSBzaXplIG9mIHRoZSBvdXRwdXQgYnVmZmVyLlxuICpcbiAqIEBleGFtcGxlIEJhc2ljIFVzYWdlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgYXNzZXJ0RXF1YWxzIH0gZnJvbSBcIkBzdGQvYXNzZXJ0XCI7XG4gKiBpbXBvcnQgeyBjYWxjU2l6ZUJhc2UzMiB9IGZyb20gXCJAc3RkL2VuY29kaW5nL3Vuc3RhYmxlLWJhc2UzMlwiO1xuICpcbiAqIGFzc2VydEVxdWFscyhjYWxjU2l6ZUJhc2UzMigxKSwgOCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGNTaXplQmFzZTMyKHJhd1NpemU6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiAoKHJhd1NpemUgKyA0KSAvIDUgfCAwKSAqIDg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoXG4gIGJ1ZmZlcjogVWludDhBcnJheV8sXG4gIGk6IG51bWJlcixcbiAgbzogbnVtYmVyLFxuICBhbHBoYWJldDogVWludDhBcnJheSxcbiAgcGFkZGluZzogbnVtYmVyLFxuKTogbnVtYmVyIHtcbiAgaSArPSA0O1xuICBmb3IgKDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkgKz0gNSkge1xuICAgIGxldCB4ID0gKGJ1ZmZlcltpIC0gNF0hIDw8IDE2KSB8IChidWZmZXJbaSAtIDNdISA8PCA4KSB8IGJ1ZmZlcltpIC0gMl0hO1xuICAgIGJ1ZmZlcltvKytdID0gYWxwaGFiZXRbeCA+PiAxOV0hO1xuICAgIGJ1ZmZlcltvKytdID0gYWxwaGFiZXRbeCA+PiAxNCAmIDB4MUZdITtcbiAgICBidWZmZXJbbysrXSA9IGFscGhhYmV0W3ggPj4gOSAmIDB4MUZdITtcbiAgICBidWZmZXJbbysrXSA9IGFscGhhYmV0W3ggPj4gNCAmIDB4MUZdITtcbiAgICB4ID0gKHggPDwgMTYpIHwgKGJ1ZmZlcltpIC0gMV0hIDw8IDgpIHwgYnVmZmVyW2ldITtcbiAgICBidWZmZXJbbysrXSA9IGFscGhhYmV0W3ggPj4gMTUgJiAweDFGXSE7XG4gICAgYnVmZmVyW28rK10gPSBhbHBoYWJldFt4ID4+IDEwICYgMHgxRl0hO1xuICAgIGJ1ZmZlcltvKytdID0gYWxwaGFiZXRbeCA+PiA1ICYgMHgxRl0hO1xuICAgIGJ1ZmZlcltvKytdID0gYWxwaGFiZXRbeCAmIDB4MUZdITtcbiAgfVxuICBzd2l0Y2ggKGkpIHtcbiAgICBjYXNlIGJ1ZmZlci5sZW5ndGggKyAzOiB7XG4gICAgICBjb25zdCB4ID0gYnVmZmVyW2kgLSA0XSEgPDwgMTY7XG4gICAgICBidWZmZXJbbysrXSA9IGFscGhhYmV0W3ggPj4gMTldITtcbiAgICAgIGJ1ZmZlcltvKytdID0gYWxwaGFiZXRbeCA+PiAxNCAmIDB4MUZdITtcbiAgICAgIGJ1ZmZlcltvKytdID0gcGFkZGluZztcbiAgICAgIGJ1ZmZlcltvKytdID0gcGFkZGluZztcbiAgICAgIGJ1ZmZlcltvKytdID0gcGFkZGluZztcbiAgICAgIGJ1ZmZlcltvKytdID0gcGFkZGluZztcbiAgICAgIGJ1ZmZlcltvKytdID0gcGFkZGluZztcbiAgICAgIGJ1ZmZlcltvKytdID0gcGFkZGluZztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIGJ1ZmZlci5sZW5ndGggKyAyOiB7XG4gICAgICBjb25zdCB4ID0gKGJ1ZmZlcltpIC0gNF0hIDw8IDE2KSB8IChidWZmZXJbaSAtIDNdISA8PCA4KTtcbiAgICAgIGJ1ZmZlcltvKytdID0gYWxwaGFiZXRbeCA+PiAxOV0hO1xuICAgICAgYnVmZmVyW28rK10gPSBhbHBoYWJldFt4ID4+IDE0ICYgMHgxRl0hO1xuICAgICAgYnVmZmVyW28rK10gPSBhbHBoYWJldFt4ID4+IDkgJiAweDFGXSE7XG4gICAgICBidWZmZXJbbysrXSA9IGFscGhhYmV0W3ggPj4gNCAmIDB4MUZdITtcbiAgICAgIGJ1ZmZlcltvKytdID0gcGFkZGluZztcbiAgICAgIGJ1ZmZlcltvKytdID0gcGFkZGluZztcbiAgICAgIGJ1ZmZlcltvKytdID0gcGFkZGluZztcbiAgICAgIGJ1ZmZlcltvKytdID0gcGFkZGluZztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIGJ1ZmZlci5sZW5ndGggKyAxOiB7XG4gICAgICBsZXQgeCA9IChidWZmZXJbaSAtIDRdISA8PCAxNikgfCAoYnVmZmVyW2kgLSAzXSEgPDwgOCkgfCBidWZmZXJbaSAtIDJdITtcbiAgICAgIGJ1ZmZlcltvKytdID0gYWxwaGFiZXRbeCA+PiAxOV0hO1xuICAgICAgYnVmZmVyW28rK10gPSBhbHBoYWJldFt4ID4+IDE0ICYgMHgxRl0hO1xuICAgICAgYnVmZmVyW28rK10gPSBhbHBoYWJldFt4ID4+IDkgJiAweDFGXSE7XG4gICAgICBidWZmZXJbbysrXSA9IGFscGhhYmV0W3ggPj4gNCAmIDB4MUZdITtcbiAgICAgIHggPDw9IDE2O1xuICAgICAgYnVmZmVyW28rK10gPSBhbHBoYWJldFt4ID4+IDE1ICYgMHgxRl0hO1xuICAgICAgYnVmZmVyW28rK10gPSBwYWRkaW5nO1xuICAgICAgYnVmZmVyW28rK10gPSBwYWRkaW5nO1xuICAgICAgYnVmZmVyW28rK10gPSBwYWRkaW5nO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgYnVmZmVyLmxlbmd0aDoge1xuICAgICAgbGV0IHggPSAoYnVmZmVyW2kgLSA0XSEgPDwgMTYpIHwgKGJ1ZmZlcltpIC0gM10hIDw8IDgpIHwgYnVmZmVyW2kgLSAyXSE7XG4gICAgICBidWZmZXJbbysrXSA9IGFscGhhYmV0W3ggPj4gMTldITtcbiAgICAgIGJ1ZmZlcltvKytdID0gYWxwaGFiZXRbeCA+PiAxNCAmIDB4MUZdITtcbiAgICAgIGJ1ZmZlcltvKytdID0gYWxwaGFiZXRbeCA+PiA5ICYgMHgxRl0hO1xuICAgICAgYnVmZmVyW28rK10gPSBhbHBoYWJldFt4ID4+IDQgJiAweDFGXSE7XG4gICAgICB4ID0gKHggPDwgMTYpIHwgKGJ1ZmZlcltpIC0gMV0hIDw8IDgpO1xuICAgICAgYnVmZmVyW28rK10gPSBhbHBoYWJldFt4ID4+IDE1ICYgMHgxRl0hO1xuICAgICAgYnVmZmVyW28rK10gPSBhbHBoYWJldFt4ID4+IDEwICYgMHgxRl0hO1xuICAgICAgYnVmZmVyW28rK10gPSBhbHBoYWJldFt4ID4+IDUgJiAweDFGXSE7XG4gICAgICBidWZmZXJbbysrXSA9IHBhZGRpbmc7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG87XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoXG4gIGJ1ZmZlcjogVWludDhBcnJheV8sXG4gIGk6IG51bWJlcixcbiAgbzogbnVtYmVyLFxuICBhbHBoYWJldDogVWludDhBcnJheSxcbiAgcGFkZGluZzogbnVtYmVyLFxuKTogbnVtYmVyIHtcbiAgZm9yIChsZXQgeCA9IGJ1ZmZlci5sZW5ndGggLSA2OyB4IDwgYnVmZmVyLmxlbmd0aDsgKyt4KSB7XG4gICAgaWYgKGJ1ZmZlclt4XSA9PT0gcGFkZGluZykge1xuICAgICAgZm9yIChsZXQgeSA9IHggKyAxOyB5IDwgYnVmZmVyLmxlbmd0aDsgKyt5KSB7XG4gICAgICAgIGlmIChidWZmZXJbeV0gIT09IHBhZGRpbmcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgYENhbm5vdCBkZWNvZGUgaW5wdXQgYXMgYmFzZTMyOiBJbnZhbGlkIGNoYXJhY3RlciAoJHtcbiAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbeV0hKVxuICAgICAgICAgICAgfSlgLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5zdWJhcnJheSgwLCB4KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzd2l0Y2ggKChidWZmZXIubGVuZ3RoIC0gbykgJSA4KSB7XG4gICAgY2FzZSA2OlxuICAgIGNhc2UgMzpcbiAgICBjYXNlIDE6XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgYENhbm5vdCBkZWNvZGUgaW5wdXQgYXMgYmFzZTMyOiBMZW5ndGggKCR7XG4gICAgICAgICAgYnVmZmVyLmxlbmd0aCAtIG9cbiAgICAgICAgfSksIGV4Y2x1ZGluZyBwYWRkaW5nLCBtdXN0IG5vdCBoYXZlIGEgcmVtYWluZGVyIG9mIDEsIDMsIG9yIDYgd2hlbiBkaXZpZGVkIGJ5IDhgLFxuICAgICAgKTtcbiAgfVxuXG4gIGkgKz0gNztcbiAgZm9yICg7IGkgPCBidWZmZXIubGVuZ3RoOyBpICs9IDgpIHtcbiAgICBsZXQgeCA9IChnZXRCeXRlKGJ1ZmZlcltpIC0gN10hLCBhbHBoYWJldCkgPDwgMTkpIHxcbiAgICAgIChnZXRCeXRlKGJ1ZmZlcltpIC0gNl0hLCBhbHBoYWJldCkgPDwgMTQpIHxcbiAgICAgIChnZXRCeXRlKGJ1ZmZlcltpIC0gNV0hLCBhbHBoYWJldCkgPDwgOSkgfFxuICAgICAgKGdldEJ5dGUoYnVmZmVyW2kgLSA0XSEsIGFscGhhYmV0KSA8PCA0KTtcbiAgICBidWZmZXJbbysrXSA9IHggPj4gMTY7XG4gICAgYnVmZmVyW28rK10gPSB4ID4+IDggJiAweEZGO1xuICAgIHggPSAoeCA8PCAxNikgfFxuICAgICAgKGdldEJ5dGUoYnVmZmVyW2kgLSAzXSEsIGFscGhhYmV0KSA8PCAxNSkgfFxuICAgICAgKGdldEJ5dGUoYnVmZmVyW2kgLSAyXSEsIGFscGhhYmV0KSA8PCAxMCkgfFxuICAgICAgKGdldEJ5dGUoYnVmZmVyW2kgLSAxXSEsIGFscGhhYmV0KSA8PCA1KSB8XG4gICAgICBnZXRCeXRlKGJ1ZmZlcltpXSEsIGFscGhhYmV0KTtcbiAgICBidWZmZXJbbysrXSA9IHggPj4gMTYgJiAweEZGO1xuICAgIGJ1ZmZlcltvKytdID0geCA+PiA4ICYgMHhGRjtcbiAgICBidWZmZXJbbysrXSA9IHggJiAweEZGO1xuICB9XG4gIHN3aXRjaCAoaSkge1xuICAgIGNhc2UgYnVmZmVyLmxlbmd0aCArIDU6IHtcbiAgICAgIGNvbnN0IHggPSAoZ2V0Qnl0ZShidWZmZXJbaSAtIDddISwgYWxwaGFiZXQpIDw8IDE5KSB8XG4gICAgICAgIChnZXRCeXRlKGJ1ZmZlcltpIC0gNl0hLCBhbHBoYWJldCkgPDwgMTQpO1xuICAgICAgYnVmZmVyW28rK10gPSB4ID4+IDE2O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgYnVmZmVyLmxlbmd0aCArIDM6IHtcbiAgICAgIGNvbnN0IHggPSAoZ2V0Qnl0ZShidWZmZXJbaSAtIDddISwgYWxwaGFiZXQpIDw8IDE5KSB8XG4gICAgICAgIChnZXRCeXRlKGJ1ZmZlcltpIC0gNl0hLCBhbHBoYWJldCkgPDwgMTQpIHxcbiAgICAgICAgKGdldEJ5dGUoYnVmZmVyW2kgLSA1XSEsIGFscGhhYmV0KSA8PCA5KSB8XG4gICAgICAgIChnZXRCeXRlKGJ1ZmZlcltpIC0gNF0hLCBhbHBoYWJldCkgPDwgNCk7XG4gICAgICBidWZmZXJbbysrXSA9IHggPj4gMTY7XG4gICAgICBidWZmZXJbbysrXSA9IHggPj4gOCAmIDB4RkY7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBidWZmZXIubGVuZ3RoICsgMjoge1xuICAgICAgbGV0IHggPSAoZ2V0Qnl0ZShidWZmZXJbaSAtIDddISwgYWxwaGFiZXQpIDw8IDE5KSB8XG4gICAgICAgIChnZXRCeXRlKGJ1ZmZlcltpIC0gNl0hLCBhbHBoYWJldCkgPDwgMTQpIHxcbiAgICAgICAgKGdldEJ5dGUoYnVmZmVyW2kgLSA1XSEsIGFscGhhYmV0KSA8PCA5KSB8XG4gICAgICAgIChnZXRCeXRlKGJ1ZmZlcltpIC0gNF0hLCBhbHBoYWJldCkgPDwgNCk7XG4gICAgICBidWZmZXJbbysrXSA9IHggPj4gMTY7XG4gICAgICBidWZmZXJbbysrXSA9IHggPj4gOCAmIDB4RkY7XG4gICAgICB4ID0gKHggPDwgMTYpIHxcbiAgICAgICAgKGdldEJ5dGUoYnVmZmVyW2kgLSAzXSEsIGFscGhhYmV0KSA8PCAxNSk7XG4gICAgICBidWZmZXJbbysrXSA9IHggPj4gMTYgJiAweEZGO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgYnVmZmVyLmxlbmd0aDoge1xuICAgICAgbGV0IHggPSAoZ2V0Qnl0ZShidWZmZXJbaSAtIDddISwgYWxwaGFiZXQpIDw8IDE5KSB8XG4gICAgICAgIChnZXRCeXRlKGJ1ZmZlcltpIC0gNl0hLCBhbHBoYWJldCkgPDwgMTQpIHxcbiAgICAgICAgKGdldEJ5dGUoYnVmZmVyW2kgLSA1XSEsIGFscGhhYmV0KSA8PCA5KSB8XG4gICAgICAgIChnZXRCeXRlKGJ1ZmZlcltpIC0gNF0hLCBhbHBoYWJldCkgPDwgNCk7XG4gICAgICBidWZmZXJbbysrXSA9IHggPj4gMTY7XG4gICAgICBidWZmZXJbbysrXSA9IHggPj4gOCAmIDB4RkY7XG4gICAgICB4ID0gKHggPDwgMTYpIHxcbiAgICAgICAgKGdldEJ5dGUoYnVmZmVyW2kgLSAzXSEsIGFscGhhYmV0KSA8PCAxNSkgfFxuICAgICAgICAoZ2V0Qnl0ZShidWZmZXJbaSAtIDJdISwgYWxwaGFiZXQpIDw8IDEwKSB8XG4gICAgICAgIChnZXRCeXRlKGJ1ZmZlcltpIC0gMV0hLCBhbHBoYWJldCkgPDwgNSk7XG4gICAgICBidWZmZXJbbysrXSA9IHggPj4gMTYgJiAweEZGO1xuICAgICAgYnVmZmVyW28rK10gPSB4ID4+IDggJiAweEZGO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBnZXRCeXRlKGNoYXI6IG51bWJlciwgYWxwaGFiZXQ6IFVpbnQ4QXJyYXkpOiBudW1iZXIge1xuICBjb25zdCBieXRlID0gYWxwaGFiZXRbY2hhcl0gPz8gMzI7XG4gIGlmIChieXRlID09PSAzMikgeyAvLyBhbHBoYWJldC5CYXNlMzIubGVuZ3RoXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBDYW5ub3QgZGVjb2RlIGlucHV0IGFzIGJhc2UzMjogSW52YWxpZCBjaGFyYWN0ZXIgKCR7XG4gICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhcilcbiAgICAgIH0pYCxcbiAgICApO1xuICB9XG4gIHJldHVybiBieXRlO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRDtBQUtyRCxPQUFPLE1BQU0sVUFBVSxJQUFJLFVBQVUsQ0FBQyxHQUFHO0FBQ3pDLE9BQU8sTUFBTSxXQUErQztFQUMxRCxRQUFRLElBQUksY0FBYyxNQUFNLENBQUM7RUFDakMsV0FBVyxJQUFJLGNBQWMsTUFBTSxDQUFDO0VBQ3BDLGlCQUFpQixJQUFJLGNBQWMsTUFBTSxDQUFDO0FBQzVDLEVBQUU7QUFDRixPQUFPLE1BQU0sWUFBZ0Q7RUFDM0QsUUFBUSxJQUFJLFdBQVcsS0FBSyxJQUFJLENBQUM7RUFDakMsV0FBVyxJQUFJLFdBQVcsS0FBSyxJQUFJLENBQUM7RUFDcEMsaUJBQWlCLElBQUksV0FBVyxLQUFLLElBQUksQ0FBQztBQUM1QyxFQUFFO0FBQ0YsU0FBUyxNQUFNLENBQ1osT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFNLFVBQVUsTUFBTSxDQUFDLEtBQUssR0FBRztBQUNqRCxTQUFTLFNBQVMsQ0FDZixPQUFPLENBQUMsQ0FBQyxNQUFNLElBQU0sVUFBVSxTQUFTLENBQUMsS0FBSyxHQUFHO0FBQ3BELFNBQVMsZUFBZSxDQUNyQixPQUFPLENBQUMsQ0FBQyxNQUFNLElBQU0sVUFBVSxlQUFlLENBQUMsS0FBSyxHQUFHO0FBZTFEOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ0QsT0FBTyxTQUFTLGVBQWUsT0FBZTtFQUM1QyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNuQztBQUVBLE9BQU8sU0FBUyxPQUNkLE1BQW1CLEVBQ25CLENBQVMsRUFDVCxDQUFTLEVBQ1QsUUFBb0IsRUFDcEIsT0FBZTtFQUVmLEtBQUs7RUFDTCxNQUFPLElBQUksT0FBTyxNQUFNLEVBQUUsS0FBSyxFQUFHO0lBQ2hDLElBQUksSUFBSSxBQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSyxLQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSyxJQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDdEUsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxHQUFHO0lBQy9CLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssS0FBSyxLQUFLO0lBQ3RDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssSUFBSSxLQUFLO0lBQ3JDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssSUFBSSxLQUFLO0lBQ3JDLElBQUksQUFBQyxLQUFLLEtBQU8sTUFBTSxDQUFDLElBQUksRUFBRSxJQUFLLElBQUssTUFBTSxDQUFDLEVBQUU7SUFDakQsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxLQUFLLEtBQUs7SUFDdEMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxLQUFLLEtBQUs7SUFDdEMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxJQUFJLEtBQUs7SUFDckMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxLQUFLO0VBQ2xDO0VBQ0EsT0FBUTtJQUNOLEtBQUssT0FBTyxNQUFNLEdBQUc7TUFBRztRQUN0QixNQUFNLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxJQUFLO1FBQzVCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssR0FBRztRQUMvQixNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEtBQUssS0FBSztRQUN0QyxNQUFNLENBQUMsSUFBSSxHQUFHO1FBQ2QsTUFBTSxDQUFDLElBQUksR0FBRztRQUNkLE1BQU0sQ0FBQyxJQUFJLEdBQUc7UUFDZCxNQUFNLENBQUMsSUFBSSxHQUFHO1FBQ2QsTUFBTSxDQUFDLElBQUksR0FBRztRQUNkLE1BQU0sQ0FBQyxJQUFJLEdBQUc7UUFDZDtNQUNGO0lBQ0EsS0FBSyxPQUFPLE1BQU0sR0FBRztNQUFHO1FBQ3RCLE1BQU0sSUFBSSxBQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSyxLQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSztRQUN0RCxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEdBQUc7UUFDL0IsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxLQUFLLEtBQUs7UUFDdEMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxJQUFJLEtBQUs7UUFDckMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxJQUFJLEtBQUs7UUFDckMsTUFBTSxDQUFDLElBQUksR0FBRztRQUNkLE1BQU0sQ0FBQyxJQUFJLEdBQUc7UUFDZCxNQUFNLENBQUMsSUFBSSxHQUFHO1FBQ2QsTUFBTSxDQUFDLElBQUksR0FBRztRQUNkO01BQ0Y7SUFDQSxLQUFLLE9BQU8sTUFBTSxHQUFHO01BQUc7UUFDdEIsSUFBSSxJQUFJLEFBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFLLEtBQU8sTUFBTSxDQUFDLElBQUksRUFBRSxJQUFLLElBQUssTUFBTSxDQUFDLElBQUksRUFBRTtRQUN0RSxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEdBQUc7UUFDL0IsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxLQUFLLEtBQUs7UUFDdEMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxJQUFJLEtBQUs7UUFDckMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxJQUFJLEtBQUs7UUFDckMsTUFBTTtRQUNOLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssS0FBSyxLQUFLO1FBQ3RDLE1BQU0sQ0FBQyxJQUFJLEdBQUc7UUFDZCxNQUFNLENBQUMsSUFBSSxHQUFHO1FBQ2QsTUFBTSxDQUFDLElBQUksR0FBRztRQUNkO01BQ0Y7SUFDQSxLQUFLLE9BQU8sTUFBTTtNQUFFO1FBQ2xCLElBQUksSUFBSSxBQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSyxLQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSyxJQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDdEUsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxHQUFHO1FBQy9CLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssS0FBSyxLQUFLO1FBQ3RDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssSUFBSSxLQUFLO1FBQ3JDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssSUFBSSxLQUFLO1FBQ3JDLElBQUksQUFBQyxLQUFLLEtBQU8sTUFBTSxDQUFDLElBQUksRUFBRSxJQUFLO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLEdBQUcs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
// denoCacheMetadata=6838596531576154397,8550633931053427746