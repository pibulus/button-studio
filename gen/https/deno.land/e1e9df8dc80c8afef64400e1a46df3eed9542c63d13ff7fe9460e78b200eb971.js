import { getServerContext } from "../server/context.ts";
import { join } from "../server/deps.ts";
import { colors, emptyDir } from "./deps.ts";
import { BUILD_ID } from "../server/build_id.ts";
export async function build(state) {
  const outDir = state.config.build.outDir;
  const plugins = state.config.plugins;
  // Ensure that build dir is empty
  await emptyDir(outDir);
  // Create a directory for static assets produced during the build
  await Deno.mkdir(join(outDir, "static"));
  await Promise.all(plugins.map((plugin)=>plugin.configResolved?.(state.config)));
  await Promise.all(plugins.map((plugin)=>plugin.buildStart?.(state.config)));
  // Bundle assets
  const ctx = await getServerContext(state);
  const snapshot = await ctx.buildSnapshot();
  // Write output files to disk
  await Promise.all(snapshot.paths.map(async (fileName)=>{
    const data = await snapshot.read(fileName);
    if (data === null) return;
    return Deno.writeFile(join(outDir, fileName), data);
  }));
  // Write dependency snapshot file to disk
  const jsonSnapshot = {
    build_id: BUILD_ID,
    files: {}
  };
  for (const filePath of snapshot.paths){
    const dependencies = snapshot.dependencies(filePath);
    jsonSnapshot.files[filePath] = dependencies;
  }
  const snapshotPath = join(outDir, "snapshot.json");
  await Deno.writeTextFile(snapshotPath, JSON.stringify(jsonSnapshot, null, 2));
  console.log(`Assets written to: ${colors.green(outDir)}`);
  await Promise.all(plugins.map((plugin)=>plugin.buildEnd?.()));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZnJlc2hAMS43LjMvc3JjL2Rldi9idWlsZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRTZXJ2ZXJDb250ZXh0IH0gZnJvbSBcIi4uL3NlcnZlci9jb250ZXh0LnRzXCI7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSBcIi4uL3NlcnZlci9kZXBzLnRzXCI7XG5pbXBvcnQgeyBjb2xvcnMsIGVtcHR5RGlyIH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuaW1wb3J0IHsgQnVpbGRTbmFwc2hvdEpzb24gfSBmcm9tIFwiLi4vYnVpbGQvbW9kLnRzXCI7XG5pbXBvcnQgeyBCVUlMRF9JRCB9IGZyb20gXCIuLi9zZXJ2ZXIvYnVpbGRfaWQudHNcIjtcbmltcG9ydCB7IEludGVybmFsRnJlc2hTdGF0ZSB9IGZyb20gXCIuLi9zZXJ2ZXIvdHlwZXMudHNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkKFxuICBzdGF0ZTogSW50ZXJuYWxGcmVzaFN0YXRlLFxuKSB7XG4gIGNvbnN0IG91dERpciA9IHN0YXRlLmNvbmZpZy5idWlsZC5vdXREaXI7XG4gIGNvbnN0IHBsdWdpbnMgPSBzdGF0ZS5jb25maWcucGx1Z2lucztcblxuICAvLyBFbnN1cmUgdGhhdCBidWlsZCBkaXIgaXMgZW1wdHlcbiAgYXdhaXQgZW1wdHlEaXIob3V0RGlyKTtcblxuICAvLyBDcmVhdGUgYSBkaXJlY3RvcnkgZm9yIHN0YXRpYyBhc3NldHMgcHJvZHVjZWQgZHVyaW5nIHRoZSBidWlsZFxuICBhd2FpdCBEZW5vLm1rZGlyKGpvaW4ob3V0RGlyLCBcInN0YXRpY1wiKSk7XG5cbiAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgcGx1Z2lucy5tYXAoKHBsdWdpbikgPT4gcGx1Z2luLmNvbmZpZ1Jlc29sdmVkPy4oc3RhdGUuY29uZmlnKSksXG4gICk7XG4gIGF3YWl0IFByb21pc2UuYWxsKHBsdWdpbnMubWFwKChwbHVnaW4pID0+IHBsdWdpbi5idWlsZFN0YXJ0Py4oc3RhdGUuY29uZmlnKSkpO1xuXG4gIC8vIEJ1bmRsZSBhc3NldHNcbiAgY29uc3QgY3R4ID0gYXdhaXQgZ2V0U2VydmVyQ29udGV4dChzdGF0ZSk7XG4gIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgY3R4LmJ1aWxkU25hcHNob3QoKTtcblxuICAvLyBXcml0ZSBvdXRwdXQgZmlsZXMgdG8gZGlza1xuICBhd2FpdCBQcm9taXNlLmFsbChzbmFwc2hvdC5wYXRocy5tYXAoYXN5bmMgKGZpbGVOYW1lKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHNuYXBzaG90LnJlYWQoZmlsZU5hbWUpO1xuICAgIGlmIChkYXRhID09PSBudWxsKSByZXR1cm47XG5cbiAgICByZXR1cm4gRGVuby53cml0ZUZpbGUoam9pbihvdXREaXIsIGZpbGVOYW1lKSwgZGF0YSk7XG4gIH0pKTtcblxuICAvLyBXcml0ZSBkZXBlbmRlbmN5IHNuYXBzaG90IGZpbGUgdG8gZGlza1xuICBjb25zdCBqc29uU25hcHNob3Q6IEJ1aWxkU25hcHNob3RKc29uID0ge1xuICAgIGJ1aWxkX2lkOiBCVUlMRF9JRCxcbiAgICBmaWxlczoge30sXG4gIH07XG4gIGZvciAoY29uc3QgZmlsZVBhdGggb2Ygc25hcHNob3QucGF0aHMpIHtcbiAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBzbmFwc2hvdC5kZXBlbmRlbmNpZXMoZmlsZVBhdGgpO1xuICAgIGpzb25TbmFwc2hvdC5maWxlc1tmaWxlUGF0aF0gPSBkZXBlbmRlbmNpZXM7XG4gIH1cblxuICBjb25zdCBzbmFwc2hvdFBhdGggPSBqb2luKG91dERpciwgXCJzbmFwc2hvdC5qc29uXCIpO1xuICBhd2FpdCBEZW5vLndyaXRlVGV4dEZpbGUoc25hcHNob3RQYXRoLCBKU09OLnN0cmluZ2lmeShqc29uU25hcHNob3QsIG51bGwsIDIpKTtcblxuICBjb25zb2xlLmxvZyhcbiAgICBgQXNzZXRzIHdyaXR0ZW4gdG86ICR7Y29sb3JzLmdyZWVuKG91dERpcil9YCxcbiAgKTtcblxuICBhd2FpdCBQcm9taXNlLmFsbChwbHVnaW5zLm1hcCgocGx1Z2luKSA9PiBwbHVnaW4uYnVpbGRFbmQ/LigpKSk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxnQkFBZ0IsUUFBUSx1QkFBdUI7QUFDeEQsU0FBUyxJQUFJLFFBQVEsb0JBQW9CO0FBQ3pDLFNBQVMsTUFBTSxFQUFFLFFBQVEsUUFBUSxZQUFZO0FBRTdDLFNBQVMsUUFBUSxRQUFRLHdCQUF3QjtBQUdqRCxPQUFPLGVBQWUsTUFDcEIsS0FBeUI7RUFFekIsTUFBTSxTQUFTLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNO0VBQ3hDLE1BQU0sVUFBVSxNQUFNLE1BQU0sQ0FBQyxPQUFPO0VBRXBDLGlDQUFpQztFQUNqQyxNQUFNLFNBQVM7RUFFZixpRUFBaUU7RUFDakUsTUFBTSxLQUFLLEtBQUssQ0FBQyxLQUFLLFFBQVE7RUFFOUIsTUFBTSxRQUFRLEdBQUcsQ0FDZixRQUFRLEdBQUcsQ0FBQyxDQUFDLFNBQVcsT0FBTyxjQUFjLEdBQUcsTUFBTSxNQUFNO0VBRTlELE1BQU0sUUFBUSxHQUFHLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxTQUFXLE9BQU8sVUFBVSxHQUFHLE1BQU0sTUFBTTtFQUUxRSxnQkFBZ0I7RUFDaEIsTUFBTSxNQUFNLE1BQU0saUJBQWlCO0VBQ25DLE1BQU0sV0FBVyxNQUFNLElBQUksYUFBYTtFQUV4Qyw2QkFBNkI7RUFDN0IsTUFBTSxRQUFRLEdBQUcsQ0FBQyxTQUFTLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTztJQUMxQyxNQUFNLE9BQU8sTUFBTSxTQUFTLElBQUksQ0FBQztJQUNqQyxJQUFJLFNBQVMsTUFBTTtJQUVuQixPQUFPLEtBQUssU0FBUyxDQUFDLEtBQUssUUFBUSxXQUFXO0VBQ2hEO0VBRUEseUNBQXlDO0VBQ3pDLE1BQU0sZUFBa0M7SUFDdEMsVUFBVTtJQUNWLE9BQU8sQ0FBQztFQUNWO0VBQ0EsS0FBSyxNQUFNLFlBQVksU0FBUyxLQUFLLENBQUU7SUFDckMsTUFBTSxlQUFlLFNBQVMsWUFBWSxDQUFDO0lBQzNDLGFBQWEsS0FBSyxDQUFDLFNBQVMsR0FBRztFQUNqQztFQUVBLE1BQU0sZUFBZSxLQUFLLFFBQVE7RUFDbEMsTUFBTSxLQUFLLGFBQWEsQ0FBQyxjQUFjLEtBQUssU0FBUyxDQUFDLGNBQWMsTUFBTTtFQUUxRSxRQUFRLEdBQUcsQ0FDVCxDQUFDLG1CQUFtQixFQUFFLE9BQU8sS0FBSyxDQUFDLFNBQVM7RUFHOUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFNBQVcsT0FBTyxRQUFRO0FBQzNEIn0=
// denoCacheMetadata=1311442890114032894,10487841029734349275