// Copyright 2018-2025 the Deno authors. MIT license.
// This module is browser compatible.

/**
 * Returns the index of the last occurrence of the needle array in the source
 * array, or -1 if it is not present.
 *
 * The complexity of this function is `O(source.length * needle.length)`.
 *
 * @param source Source array to check.
 * @param needle Needle array to check for.
 * @param start Start index in the source array to begin the search. Defaults to
 * `source.length - 1`.
 * @returns Index of the last occurrence of the needle array in the source
 * array, or -1 if it is not present.
 *
 * @example Basic usage
 * ```ts
 * import { lastIndexOfNeedle } from "@std/bytes/last-index-of-needle";
 * import { assertEquals } from "@std/assert";
 *
 * const source = new Uint8Array([0, 1, 2, 1, 2, 1, 2, 3]);
 * const needle = new Uint8Array([1, 2]);
 * const notNeedle = new Uint8Array([5, 0]);
 *
 * assertEquals(lastIndexOfNeedle(source, needle), 5);
 * assertEquals(lastIndexOfNeedle(source, notNeedle), -1);
 * ```
 *
 * @example Start index
 * ```ts
 * import { lastIndexOfNeedle } from "@std/bytes/last-index-of-needle";
 * import { assertEquals } from "@std/assert";
 *
 * const source = new Uint8Array([0, 1, 2, 1, 2, 1, 2, 3]);
 * const needle = new Uint8Array([1, 2]);
 *
 * assertEquals(lastIndexOfNeedle(source, needle, 2), 1);
 * assertEquals(lastIndexOfNeedle(source, needle, 6), 5);
 * ```
 * Defining a start index will begin the search at the specified index in the
 * source array.
 */
export function lastIndexOfNeedle(
  source: Uint8Array,
  needle: Uint8Array,
  start: number = source.length - 1,
): number {
  if (start < 0) {
    return -1;
  }
  if (start >= source.length) {
    start = source.length - 1;
  }
  const e = needle[needle.length - 1];
  for (let i = start; i >= 0; i--) {
    if (source[i] !== e) continue;
    let matched = 1;
    let j = i;
    while (
      matched < needle.length &&
      source[--j] === needle[needle.length - 1 - (i - j)]
    ) {
      matched++;
    }
    if (matched === needle.length) {
      return i - needle.length + 1;
    }
  }
  return -1;
}

// denoCacheMetadata={"headers":{"content-type":"text/typescript","via":"1.1 google","cache-control":"public, max-age=31536000, immutable","expires":"Fri, 26 Jun 2026 12:57:34 GMT","x-goog-stored-content-length":"2121","x-goog-storage-class":"STANDARD","accept-ranges":"bytes","etag":"\"bd17a1c287677bf783cfcf56b65c9c22\"","x-goog-stored-content-encoding":"identity","access-control-allow-origin":"*","x-robots-tag":"noindex","x-jsr-cache-status":"miss","x-goog-hash":"crc32c=NKqyOw==,md5=vRehwodne/eDz89WtlycIg==","cross-origin-resource-policy":"cross-origin","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-guploader-uploadid":"ABgVH89CaB7b5mU82cZTXPyedkQsiaVfhF8jqnNjyuF7wV6rKKOI_yy1fphuJhitoMgtPUURAH8cl_0","date":"Thu, 26 Jun 2025 12:57:34 GMT","last-modified":"Tue, 13 May 2025 07:25:35 GMT","access-control-expose-headers":"*","x-goog-metageneration":"1","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-jsr-cache-id":"MEL","server":"UploadServer","content-length":"2121","x-content-type-options":"nosniff","x-goog-generation":"1747121135066360"},"url":"https://jsr.io/@std/bytes/1.0.6/last_index_of_needle.ts","time":1750942654}