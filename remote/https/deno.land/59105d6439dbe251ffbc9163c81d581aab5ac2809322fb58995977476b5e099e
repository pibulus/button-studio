import { VNode } from "preact";
import { BUILD_ID } from "./build_id.ts";

export const INTERNAL_PREFIX = "/_frsh";
export const ASSET_CACHE_BUST_KEY = "__frsh_c";

/**
 * Returns true when the current runtime is the browser and false otherwise. This is used for guard runtime-dependent code.
 * Shorthand for the following:
 * `typeof document !== "undefined"`
 *
 * @example
 * ```
 *  if (IS_BROWSER) {
 *    alert('This is running in the browser!');
 *  } else {
 *    console.log('This code is running on the server, no access to window or alert');
 *  }
 * ```
 *
 * Without this guard, alert pauses the server until return is pressed in the console.
 */
export const IS_BROWSER = typeof document !== "undefined";

/**
 * Create a "locked" asset path. This differs from a plain path in that it is
 * specific to the current version of the application, and as such can be safely
 * served with a very long cache lifetime (1 year).
 */
export function asset(path: string): string {
  if (!path.startsWith("/") || path.startsWith("//")) return path;
  try {
    const url = new URL(path, "https://freshassetcache.local");
    if (
      url.protocol !== "https:" || url.host !== "freshassetcache.local" ||
      url.searchParams.has(ASSET_CACHE_BUST_KEY)
    ) {
      return path;
    }
    url.searchParams.set(ASSET_CACHE_BUST_KEY, BUILD_ID);
    return url.pathname + url.search + url.hash;
  } catch (err) {
    console.warn(
      `Failed to create asset() URL, falling back to regular path ('${path}'):`,
      err,
    );
    return path;
  }
}

/** Apply the `asset` function to urls in a `srcset` attribute. */
export function assetSrcSet(srcset: string): string {
  if (srcset.includes("(")) return srcset; // Bail if the srcset contains complicated syntax.
  const parts = srcset.split(",");
  const constructed = [];
  for (const part of parts) {
    const trimmed = part.trimStart();
    const leadingWhitespace = part.length - trimmed.length;
    if (trimmed === "") return srcset; // Bail if the srcset is malformed.
    let urlEnd = trimmed.indexOf(" ");
    if (urlEnd === -1) urlEnd = trimmed.length;
    const leading = part.substring(0, leadingWhitespace);
    const url = trimmed.substring(0, urlEnd);
    const trailing = trimmed.substring(urlEnd);
    constructed.push(leading + asset(url) + trailing);
  }
  return constructed.join(",");
}

export function assetHashingHook(
  vnode: VNode<{
    src?: string;
    srcset?: string;
    ["data-fresh-disable-lock"]?: boolean;
  }>,
) {
  if (vnode.type === "img" || vnode.type === "source") {
    const { props } = vnode;
    if (props["data-fresh-disable-lock"]) return;
    if (typeof props.src === "string") {
      props.src = asset(props.src);
    }
    if (typeof props.srcset === "string") {
      props.srcset = assetSrcSet(props.srcset);
    }
  }
}

// denoCacheMetadata={"headers":{"cache-control":"public, max-age=31536000, immutable","x-amz-cf-id":"_Z1_7moolu1lWjjtfBMrbsBnApYq2yZjJZ9Z-TsmsVbwCOL8AMIRVA==","last-modified":"Mon, 14 Oct 2024 12:51:13 GMT","x-frame-options":"DENY","x-amz-cf-pop":"SIN52-P1","content-type":"application/typescript; charset=utf-8","access-control-allow-origin":"*","x-cache":"Hit from cloudfront","accept-ranges":"bytes","server":"deno/gcp-asia-southeast1","x-amz-server-side-encryption":"AES256","cross-origin-resource-policy":"same-origin","content-length":"2835","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","date":"Thu, 17 Oct 2024 14:13:51 GMT","strict-transport-security":"max-age=63072000; includeSubDomains; preload","referrer-policy":"strict-origin-when-cross-origin","vary":"Accept-Encoding, Origin","cross-origin-embedder-policy":"same-origin","via":"http/2 edgeproxy-h","x-amz-replication-status":"COMPLETED","x-content-type-options":"nosniff","x-amz-version-id":"ZjgQeJLPM1yq7YaEh3cJ6xT9d51WY5iW","etag":"\"ea7bdf8f9ac8d9bcc8418440231a74a8\"","cross-origin-opener-policy":"same-origin","server-timing":"fetchSource;dur=34","age":"21768218"},"url":"https://deno.land/x/fresh@1.7.3/src/runtime/utils.ts","time":1750942649}