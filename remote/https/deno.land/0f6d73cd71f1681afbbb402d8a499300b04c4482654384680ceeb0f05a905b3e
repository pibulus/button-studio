// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
import { equal } from "./equal.ts";
import { format } from "./_format.ts";
import { AssertionError } from "./assertion_error.ts";
import { red } from "../fmt/colors.ts";
import { buildMessage, diff, diffstr } from "./_diff.ts";
import { CAN_NOT_DISPLAY } from "./_constants.ts";

/**
 * Make an assertion that `actual` and `expected` are equal, deeply. If not
 * deeply equal, then throw.
 *
 * Type parameter can be specified to ensure values under comparison have the
 * same type.
 *
 * @example
 * ```ts
 * import { assertEquals } from "https://deno.land/std@$STD_VERSION/assert/assert_equals.ts";
 *
 * assertEquals("world", "world"); // Doesn't throw
 * assertEquals("hello", "world"); // Throws
 * ```
 *
 * Note: formatter option is experimental and may be removed in the future.
 */
export function assertEquals<T>(
  actual: T,
  expected: T,
  msg?: string,
  options: { formatter?: (value: unknown) => string } = {},
) {
  if (equal(actual, expected)) {
    return;
  }
  const { formatter = format } = options;
  const msgSuffix = msg ? `: ${msg}` : ".";
  let message = `Values are not equal${msgSuffix}`;

  const actualString = formatter(actual);
  const expectedString = formatter(expected);
  try {
    const stringDiff = (typeof actual === "string") &&
      (typeof expected === "string");
    const diffResult = stringDiff
      ? diffstr(actual as string, expected as string)
      : diff(actualString.split("\n"), expectedString.split("\n"));
    const diffMsg = buildMessage(diffResult, { stringDiff }).join("\n");
    message = `${message}\n${diffMsg}`;
  } catch {
    message = `${message}\n${red(CAN_NOT_DISPLAY)} + \n\n`;
  }
  throw new AssertionError(message);
}

// denoCacheMetadata={"headers":{"vary":"Accept-Encoding, Origin","x-amz-cf-pop":"SIN52-P1","x-frame-options":"DENY","access-control-allow-origin":"*","age":"8389538","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","cross-origin-opener-policy":"same-origin","referrer-policy":"strict-origin-when-cross-origin","date":"Fri, 21 Mar 2025 10:31:52 GMT","strict-transport-security":"max-age=63072000; includeSubDomains; preload","x-amz-replication-status":"COMPLETED","via":"http/2 edgeproxy-h","x-amz-cf-id":"KSrYBEv1pbCAsAOd3DbTNQSKb1xrOT6cjK4skK__WpjRo3WaZbzZuA==","x-cache":"Hit from cloudfront","x-amz-server-side-encryption":"AES256","etag":"\"7591f94237be9c77fd8ff68bffab01da\"","server":"deno/gcp-asia-southeast1","x-amz-version-id":"I9DAebKzmELmks5piX4j22la3RWRz8Xw","x-content-type-options":"nosniff","accept-ranges":"bytes","last-modified":"Thu, 15 Feb 2024 05:02:27 GMT","cache-control":"public, max-age=31536000, immutable","cross-origin-resource-policy":"same-origin","content-length":"1769","server-timing":"fetchSource;dur=26","content-type":"application/typescript; charset=utf-8","cross-origin-embedder-policy":"same-origin"},"url":"https://deno.land/std@0.216.0/assert/assert_equals.ts","time":1750942649}