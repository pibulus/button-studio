import { DENO_DEPLOYMENT_ID } from "./build_id.ts";
import { colors } from "./deps.ts";
import { ServeHandler } from "./types.ts";

const defaultOnListenFor = <T>(getAddress: (params: T) => string) => {
  return (params: T) => {
    const address = colors.cyan(
      getAddress(params),
    );
    const localLabel = colors.bold("Local:");

    // Print more concise output for deploy logs
    if (DENO_DEPLOYMENT_ID) {
      console.log(
        colors.bgRgb8(colors.rgb8(" 🍋 Fresh ready ", 0), 121),
        `${localLabel} ${address}`,
      );
    } else {
      console.log();
      console.log(
        colors.bgRgb8(colors.rgb8(" 🍋 Fresh ready ", 0), 121),
      );
      console.log(`    ${localLabel} ${address}\n`);
    }
  };
};
export async function startUnixServer(
  handler: Deno.ServeUnixHandler,
  opts: Deno.ServeUnixOptions,
) {
  if (!opts.onListen) {
    opts.onListen = defaultOnListenFor((params) => {
      return `socket://${params.path}`;
    });
    // @ts-ignore Ignore type error when type checking with Deno versions
    if (typeof Deno.serve === "function") {
      await Deno.serve(
        opts,
        handler,
      ).finished;
    }
    throw new Error(
      `unix domain sockets are not supported in your current deno version.`,
    );
  }
}
export async function startServer(
  handler: Deno.ServeHandler,
  opts: Partial<Deno.ServeTlsOptions> & { basePath: string },
) {
  if (!opts.onListen) {
    opts.onListen = defaultOnListenFor((params) => {
      const pathname = opts.basePath + "/";
      const https = !!(opts.key && opts.cert);
      const protocol = https ? "https:" : "http:";
      return `${protocol}//localhost:${params.port}${pathname}`;
    });
  }

  const portEnv = Deno.env.get("PORT");
  if (portEnv !== undefined) {
    opts.port ??= parseInt(portEnv, 10);
  }

  if (opts.port) {
    await bootServer(handler, opts);
  } else {
    // No port specified, check for a free port. Instead of picking just
    // any port we'll check if the next one is free for UX reasons.
    // That way the user only needs to increment a number when running
    // multiple apps vs having to remember completely different ports.
    let firstError;
    for (let port = 8000; port < 8020; port++) {
      try {
        await bootServer(handler, { ...opts, port });
        firstError = undefined;
        break;
      } catch (err) {
        if (err instanceof Deno.errors.AddrInUse) {
          // Throw first EADDRINUSE error
          // if no port is free
          if (!firstError) {
            firstError = err;
          }
          continue;
        }

        throw err;
      }
    }

    if (firstError) {
      throw firstError;
    }
  }
}

async function bootServer(
  handler: ServeHandler,
  opts: Partial<Deno.ServeTlsOptions>,
) {
  // @ts-ignore Ignore type error when type checking with Deno versions
  if (typeof Deno.serve === "function") {
    // @ts-ignore Ignore type error when type checking with Deno versions
    await Deno.serve(
      opts,
      (r, info) =>
        handler(
          r,
          {
            ...info,
            remoteAddr: info.remoteAddr,
            localAddr: {
              transport: "tcp",
              hostname: opts.hostname ?? "localhost",
              port: opts.port,
            } as Deno.NetAddr,
          },
        ),
    ).finished;
  } else {
    // @ts-ignore Deprecated std serve way
    await serve(handler, opts);
  }
}

// denoCacheMetadata={"headers":{"server-timing":"fetchSource;dur=10","referrer-policy":"strict-origin-when-cross-origin","strict-transport-security":"max-age=63072000; includeSubDomains; preload","cross-origin-embedder-policy":"same-origin","content-type":"application/typescript; charset=utf-8","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","etag":"\"f78df07a915ccfdb9775591997623896\"","vary":"Accept-Encoding, Origin","x-amz-cf-id":"f0nRwyJxjzBRvMbtcoxyU_rNvgtSUM0eO95JCtApz-YMC5woxH58Kw==","accept-ranges":"bytes","x-amz-replication-status":"COMPLETED","x-amz-version-id":"pmZFECqk7ns2Rf_xYPsx6ymlboZ76XOF","content-length":"3452","last-modified":"Mon, 14 Oct 2024 12:51:13 GMT","x-cache":"Hit from cloudfront","via":"http/2 edgeproxy-h","cross-origin-resource-policy":"same-origin","cross-origin-opener-policy":"same-origin","x-content-type-options":"nosniff","x-amz-server-side-encryption":"AES256","server":"deno/gcp-asia-southeast1","age":"21768220","x-amz-cf-pop":"SIN52-P1","cache-control":"public, max-age=31536000, immutable","access-control-allow-origin":"*","date":"Thu, 17 Oct 2024 14:13:49 GMT","x-frame-options":"DENY"},"url":"https://deno.land/x/fresh@1.7.3/src/server/boot.ts","time":1750942648}