// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.

import { CHAR_DOT } from "../_common/constants.ts";
import { assertPath } from "../_common/assert_path.ts";
import { isPosixPathSeparator } from "./_util.ts";

/**
 * Return the extension of the `path` with leading period.
 * @param path with extension
 * @returns extension (ex. for `file.ts` returns `.ts`)
 */
export function extname(path: string): string {
  assertPath(path);

  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  let preDotState = 0;
  for (let i = path.length - 1; i >= 0; --i) {
    const code = path.charCodeAt(i);
    if (isPosixPathSeparator(code)) {
      // If we reached a path separator that was not part of a set of path
      // separators at the end of the string, stop now
      if (!matchedSlash) {
        startPart = i + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === CHAR_DOT) {
      // If this is our first dot, mark it as the start of our extension
      if (startDot === -1) startDot = i;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (
    startDot === -1 ||
    end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
  ) {
    return "";
  }
  return path.slice(startDot, end);
}

// denoCacheMetadata={"headers":{"x-frame-options":"DENY","content-length":"1976","x-amz-replication-status":"COMPLETED","content-type":"application/typescript; charset=utf-8","referrer-policy":"strict-origin-when-cross-origin","x-amz-server-side-encryption":"AES256","access-control-allow-origin":"*","x-amz-version-id":"olnEC3wqmFenNykfFyU98zkQfb1N2A0i","cross-origin-opener-policy":"same-origin","cross-origin-embedder-policy":"same-origin","server":"deno/gcp-asia-southeast1","server-timing":"fetchSource;dur=18","x-amz-cf-id":"I-bWIFG54zsqRtm_9HLhNjvEsyx6la5mUmOl02Xwpvkh2N9evM1ykQ==","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","strict-transport-security":"max-age=63072000; includeSubDomains; preload","x-cache":"Hit from cloudfront","cross-origin-resource-policy":"same-origin","x-content-type-options":"nosniff","vary":"Accept-Encoding, Origin","date":"Fri, 21 Mar 2025 14:39:07 GMT","via":"http/2 edgeproxy-h","accept-ranges":"bytes","cache-control":"public, max-age=31536000, immutable","age":"8374706","x-amz-cf-pop":"SIN52-P1","etag":"\"8155f30646e7a2d9b5d668e58fb0d27f\"","last-modified":"Fri, 24 Nov 2023 02:50:10 GMT"},"url":"https://deno.land/std@0.208.0/path/posix/extname.ts","time":1750942652}