import { ResolvedFreshConfig } from "../server/types.ts";
import { colors, join } from "../server/deps.ts";
import type { BuildSnapshot, BuildSnapshotJson } from "./mod.ts";
import { setBuildId } from "../server/build_id.ts";

export class AotSnapshot implements BuildSnapshot {
  #files: Map<string, string>;
  #dependencies: Map<string, string[]>;

  constructor(
    files: Map<string, string>,
    dependencies: Map<string, string[]>,
  ) {
    this.#files = files;
    this.#dependencies = dependencies;
  }

  get paths(): string[] {
    return Array.from(this.#files.keys());
  }

  async read(path: string): Promise<ReadableStream<Uint8Array> | null> {
    const filePath = this.#files.get(path);
    if (filePath !== undefined) {
      try {
        const file = await Deno.open(filePath, { read: true });
        return file.readable;
      } catch (_err) {
        return null;
      }
    }

    // Handler will turn this into a 404
    return null;
  }

  dependencies(path: string): string[] {
    return this.#dependencies.get(path) ?? [];
  }
}

export async function loadAotSnapshot(
  config: ResolvedFreshConfig,
): Promise<AotSnapshot | null> {
  const snapshotDirPath = config.build.outDir;
  try {
    if ((await Deno.stat(snapshotDirPath)).isDirectory) {
      console.log(
        `Using snapshot found at ${colors.cyan(snapshotDirPath)}`,
      );

      const snapshotPath = join(snapshotDirPath, "snapshot.json");
      const json = JSON.parse(
        await Deno.readTextFile(snapshotPath),
      ) as BuildSnapshotJson;
      setBuildId(json.build_id);

      const dependencies = new Map<string, string[]>(
        Object.entries(json.files),
      );

      const files = new Map<string, string>();
      Object.keys(json.files).forEach((name) => {
        const filePath = join(snapshotDirPath, name);
        files.set(name, filePath);
      });

      return new AotSnapshot(files, dependencies);
    }
    return null;
  } catch (err) {
    if (!(err instanceof Deno.errors.NotFound)) {
      throw err;
    }
    return null;
  }
}

// denoCacheMetadata={"headers":{"x-cache":"Hit from cloudfront","via":"http/2 edgeproxy-h","accept-ranges":"bytes","cross-origin-embedder-policy":"same-origin","cache-control":"public, max-age=31536000, immutable","cross-origin-resource-policy":"same-origin","date":"Thu, 17 Oct 2024 14:13:51 GMT","server":"deno/gcp-asia-southeast1","server-timing":"fetchSource;dur=34","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","x-amz-cf-pop":"SIN52-P1","access-control-allow-origin":"*","content-length":"2068","etag":"\"f28f8ec406147a8c39c542941a9d0abe\"","content-type":"application/typescript; charset=utf-8","x-frame-options":"DENY","referrer-policy":"strict-origin-when-cross-origin","vary":"Accept-Encoding, Origin","age":"21768218","cross-origin-opener-policy":"same-origin","x-amz-replication-status":"COMPLETED","last-modified":"Mon, 14 Oct 2024 12:51:13 GMT","x-amz-cf-id":"KypiXQ0EqVFmWnbgirxtYcXUwfsCxNsHiQsPwABEo1I83HgOmSGf3A==","x-amz-server-side-encryption":"AES256","x-amz-version-id":"NfSBLvwQgKwtzQx3L1uglNSKATTeHuze","x-content-type-options":"nosniff","strict-transport-security":"max-age=63072000; includeSubDomains; preload"},"url":"https://deno.land/x/fresh@1.7.3/src/build/aot_snapshot.ts","time":1750942649}